
from androguard.misc import AnalyzeAPK
from pwnlib.elf import elf
from core.androhelper import *
from core.malwares.utils import check_header

class ActionSpy:

    def __init__(self, apk_path, output_dir):

        self.known_packages = ['com.omn.vvi', 'com.isyjv.klxblnwc.r', 'com.isyjv.klxblnwc.r', 'com.isyjv.klxblnwc',
                               'com.android.dmp.rec', 'com.android.dmp.r', 'com.android.dmp.l', 'com.android.dmp.cm',
                               'com.android.dmp.c', 'com.ecs.esap', 'com.cd.weixin']
        self.known_function_libs_names = ['makeInMemoryDexElements', 'fill_memory_filefunc', 'handData',
                                          'huaweishareFromJNI', 'is_batteryinfo_valid', 'get_apk_content',
                                          'get_apk_size', 'get_apk_file_buffer', 'enciphering',
                                          'pA84045DB0C17344F652FA75FDAFBEE33']

        self.apk_path = apk_path
        self.a, self.d, self.dx = AnalyzeAPK(self.apk_path)
        self.output_dir = output_dir
        self.score = 0
        self.test = 0

    def check(self):
        self.score = 0
        self.test = 0

        # test
        self.test = self.test + 1
        if self.a.get_package in self.known_packages:
            self.score = self.score + 1

        for file in self.a.get_files():

            file_type = check_header(self.a.get_file(file)[0:4].hex())

            if "ELF" == file_type:
                try:
                    self.dump_and_func_check(self.a, file)
                except Exception as e:
                    continue

            if "ZIP" == file_type:

                if not os.path.isdir(self.output_dir):
                    os.makedirs(self.output_dir)

                f = open(self.output_dir + file.split("/")[-1], 'wb')
                f.write(self.a.get_file(file))
                f.close()

                try:
                    a, d, dx = AnalyzeAPK(self.output_dir + file.split("/")[-1])

                    # The archive is an APK
                    # test : embedded apk
                    self.test = self.test + 1
                    self.score = self.score + 1

                except Exception as e:  # not apk file
                    continue

                for sub_file in a.get_files():
                    sub_file_type = check_header(a.get_file(sub_file)[0:4].hex())

                    if "hello-jni" in sub_file:
                        self.score = self.score + 1

                    if "SecShell" in sub_file:

                        self.score = self.score + 1

                    if "blocSDK7a" in sub_file:
                        self.score = self.score + 1

                    if sub_file_type is not None:
                        try:
                            self.dump_and_func_check(a, sub_file)
                        except Exception as e:
                            print(e)
                            continue

        return self.score

    def dump_and_func_check(self, a, file):

        if not os.path.isdir(self.output_dir):
            os.makedirs(self.output_dir)

        out_file = self.output_dir + file.split("/")[-1]
        f = open(out_file, 'wb')
        f.write(a.get_file(file))
        f.close()
        library = elf.ELF(out_file)
        # checks libraries functions names
        for key in library.symbols.keys():
            for func in self.known_function_libs_names:
                if func in key:
                    self.score = self.score + 1

        return self.score
